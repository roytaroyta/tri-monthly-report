type Todo {
  id: ID!
  name: String!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Employee {
  email: String!
  name: String!
  hireDate: AWSDate!
  department: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

"""
月報データを格納するテーブル
reportDate は YYYY-MM 形式で保存
"""
type MonthlyReport {
  id: ID!
  email: String!
  reportMonth: String!
  submissionDate: AWSDate!
  content: AWSJSON!
  status: String!
  feedback: AWSJSON!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTodoConnection {
  items: [Todo]!
  nextToken: String
}

input ModelTodoFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
}

type Query {
  getTodo(id: ID!): Todo
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
  getEmployee(email: String!): Employee
  listEmployees(email: String, filter: ModelEmployeeFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelEmployeeConnection
  getMonthlyReport(id: ID!): MonthlyReport
  listMonthlyReports(filter: ModelMonthlyReportFilterInput, limit: Int, nextToken: String): ModelMonthlyReportConnection
  monthlyReportsByEmailAndReportMonth(email: String!, reportMonth: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelMonthlyReportFilterInput, limit: Int, nextToken: String): ModelMonthlyReportConnection
  monthlyReportsByReportMonthAndEmail(reportMonth: String!, email: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelMonthlyReportFilterInput, limit: Int, nextToken: String): ModelMonthlyReportConnection
}

input ModelTodoConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelTodoConditionInput]
  or: [ModelTodoConditionInput]
  not: ModelTodoConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateTodoInput {
  id: ID
  name: String!
  description: String
}

input UpdateTodoInput {
  id: ID!
  name: String
  description: String
}

input DeleteTodoInput {
  id: ID!
}

type Mutation {
  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo
  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo
  createEmployee(input: CreateEmployeeInput!, condition: ModelEmployeeConditionInput): Employee
  updateEmployee(input: UpdateEmployeeInput!, condition: ModelEmployeeConditionInput): Employee
  deleteEmployee(input: DeleteEmployeeInput!, condition: ModelEmployeeConditionInput): Employee
  createMonthlyReport(input: CreateMonthlyReportInput!, condition: ModelMonthlyReportConditionInput): MonthlyReport
  updateMonthlyReport(input: UpdateMonthlyReportInput!, condition: ModelMonthlyReportConditionInput): MonthlyReport
  deleteMonthlyReport(input: DeleteMonthlyReportInput!, condition: ModelMonthlyReportConditionInput): MonthlyReport
}

input ModelSubscriptionTodoFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTodoFilterInput]
  or: [ModelSubscriptionTodoFilterInput]
}

type Subscription {
  onCreateTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["createTodo"])
  onUpdateTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["updateTodo"])
  onDeleteTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["deleteTodo"])
  onCreateEmployee(filter: ModelSubscriptionEmployeeFilterInput): Employee @aws_subscribe(mutations: ["createEmployee"])
  onUpdateEmployee(filter: ModelSubscriptionEmployeeFilterInput): Employee @aws_subscribe(mutations: ["updateEmployee"])
  onDeleteEmployee(filter: ModelSubscriptionEmployeeFilterInput): Employee @aws_subscribe(mutations: ["deleteEmployee"])
  onCreateMonthlyReport(filter: ModelSubscriptionMonthlyReportFilterInput): MonthlyReport @aws_subscribe(mutations: ["createMonthlyReport"])
  onUpdateMonthlyReport(filter: ModelSubscriptionMonthlyReportFilterInput): MonthlyReport @aws_subscribe(mutations: ["updateMonthlyReport"])
  onDeleteMonthlyReport(filter: ModelSubscriptionMonthlyReportFilterInput): MonthlyReport @aws_subscribe(mutations: ["deleteMonthlyReport"])
}

type ModelEmployeeConnection {
  items: [Employee]!
  nextToken: String
}

input ModelEmployeeFilterInput {
  email: ModelStringInput
  name: ModelStringInput
  hireDate: ModelStringInput
  department: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelEmployeeFilterInput]
  or: [ModelEmployeeFilterInput]
  not: ModelEmployeeFilterInput
}

input ModelEmployeeConditionInput {
  name: ModelStringInput
  hireDate: ModelStringInput
  department: ModelStringInput
  and: [ModelEmployeeConditionInput]
  or: [ModelEmployeeConditionInput]
  not: ModelEmployeeConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateEmployeeInput {
  email: String!
  name: String!
  hireDate: AWSDate!
  department: String!
}

input UpdateEmployeeInput {
  email: String!
  name: String
  hireDate: AWSDate
  department: String
}

input DeleteEmployeeInput {
  email: String!
}

input ModelSubscriptionEmployeeFilterInput {
  email: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  hireDate: ModelSubscriptionStringInput
  department: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionEmployeeFilterInput]
  or: [ModelSubscriptionEmployeeFilterInput]
}

type ModelMonthlyReportConnection {
  items: [MonthlyReport]!
  nextToken: String
}

input ModelMonthlyReportFilterInput {
  id: ModelIDInput
  email: ModelStringInput
  reportMonth: ModelStringInput
  submissionDate: ModelStringInput
  content: ModelStringInput
  status: ModelStringInput
  feedback: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMonthlyReportFilterInput]
  or: [ModelMonthlyReportFilterInput]
  not: ModelMonthlyReportFilterInput
}

input ModelMonthlyReportConditionInput {
  email: ModelStringInput
  reportMonth: ModelStringInput
  submissionDate: ModelStringInput
  content: ModelStringInput
  status: ModelStringInput
  feedback: ModelStringInput
  and: [ModelMonthlyReportConditionInput]
  or: [ModelMonthlyReportConditionInput]
  not: ModelMonthlyReportConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateMonthlyReportInput {
  id: ID
  email: String!
  reportMonth: String!
  submissionDate: AWSDate!
  content: AWSJSON!
  status: String!
  feedback: AWSJSON!
}

input UpdateMonthlyReportInput {
  id: ID!
  email: String
  reportMonth: String
  submissionDate: AWSDate
  content: AWSJSON
  status: String
  feedback: AWSJSON
}

input DeleteMonthlyReportInput {
  id: ID!
}

input ModelSubscriptionMonthlyReportFilterInput {
  id: ModelSubscriptionIDInput
  email: ModelSubscriptionStringInput
  reportMonth: ModelSubscriptionStringInput
  submissionDate: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  feedback: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionMonthlyReportFilterInput]
  or: [ModelSubscriptionMonthlyReportFilterInput]
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
